transfer(){ if [ $# -eq 0 ];then echo "No arguments specified.\nUsage:\n transfer <file|directory>\n ... | transfer <file_name>">&2;return 1;fi;if tty -s;then file="$1";file_name=$(basename "$file");if [ ! -e "$file" ];then echo "$file: No such file or directory">&2;return 1;fi;if [ -d "$file" ];then file_name="$file_name.zip" ,;(cd "$file"&&zip -r -q - .)|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null,;else cat "$file"|curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;else file_name=$1;curl --progress-bar --upload-file "-" "https://transfer.sh/$file_name"|tee /dev/null;fi;}

function dt2h() {
    case $(uname -s) in
        Darwin)
            millis=`echo $1 | cut -c1-10`
            TZ=${TZ:-UTC} date -r $millis;;
        *)
            TZ=UTC date -d @$1;;
    esac
}

# capture the output of a command so it can be retrieved with ret
cap () { tee /tmp/capture.out}

# return the output of the most recent command that was captured by cap
ret () { cat /tmp/capture.out }

function npm-do() {
    (PATH=$(npm bin):$PATH; eval $@;)
}

function mac-is-linux() {
    PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
}

# https://coderwall.com/p/i5z1cg/automatically-update-path-with-proper-node_modules-bin
__OLD_PATH=$PATH
function updatePATHForNPM() {
    export PATH=$(npm bin):$__OLD_PATH
}

function node-mode() {
    PROMPT_COMMAND=updatePATHForNPM
}

function node-mode-off() {
    unset PROMPT_COMMAND
    PATH=$__OLD_PATH
}

precmd() {
    eval "$PROMPT_COMMAND"
}

# node-mode

batdiff() {
    git diff --name-only --diff-filter=d | xargs bat --diff
}

# https://koenwoortman.com/git-faster-branch-checkouts-with-fzf/
gch () {
    git checkout $(git for-each-ref refs/heads/ --format='%(refname:short)' | fzf)
}

send-wapp() {
    number=`echo $1 | tr -d ' '`
    open "https://api.whatsapp.com/send?phone=$number&text="
}

# Some magic from: https://github.com/junegunn/fzf/wiki/examples
# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# fbr - checkout git branch (including remote branches)
fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fshow - git commit browser
# fshow() {
#   git log --graph --color=always \
#       --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
#   fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
#       --bind "ctrl-m:execute:
#                 (grep -o '[a-f0-9]\{7\}' | head -1 |
#                 xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
#                 {}
# FZF-EOF"
# }

alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"

# fshow_preview - git commit browser with previews
fshow() {
    glNoGraph |
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, alt-y to copy hash" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "alt-y:execute:$_gitLogLineToHash | pbcopy"
}
